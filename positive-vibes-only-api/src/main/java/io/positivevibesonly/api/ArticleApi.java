/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.positivevibesonly.api;

import io.positivevibesonly.model.Article;
import io.positivevibesonly.model.PaginatedArticleModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-07-09T14:54:12.787Z[GMT]")
@Api(value = "article", description = "the article API")
public interface ArticleApi {

    @ApiOperation(value = "adds an article item", nickname = "addArticle", notes = "Adds an article item to the system", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "item created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/article",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addArticle(@ApiParam(value = "article item to add"  )  @Valid @RequestBody Article body
);


    @ApiOperation(value = "update an article item", nickname = "deleteArticle", notes = "Updates an article item to the system", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "item deleted"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item doesn't exist") })
    @RequestMapping(value = "/article",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteArticle(@ApiParam(value = "id") @Valid @RequestParam(value = "id", required = true ) Long id);


    @ApiOperation(value = "searches article", nickname = "searchArticle", notes = "By passing in the appropriate options, you can search for available inventory in the system ", response = Article.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Article.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = {"/article","/article/{id}"},
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaginatedArticleModel> searchArticle(@ApiParam(value = "pass an optional search string for looking up article") @Valid @RequestParam(value = "searchString", required = false) String searchString
, @Min(0)@ApiParam(value = "number of records to skip for pagination", allowableValues = "") @Valid @RequestParam(value = "skip", required = false) Integer skip
, @Min(0) @Max(50) @ApiParam(value = "maximum number of records to return", allowableValues = "") @Valid @RequestParam(value = "limit", required = false) Integer limit
, @ApiParam(value = "id") @Valid @PathVariable(value = "id", required = false) Optional<Long> id
    );

    @ApiOperation(value = "get Articles by category", nickname = "getArticlesByCategory", notes = "By passing in the appropriate options, you can search for available inventory in the system ", response = PaginatedArticleModel.class, responseContainer = "Object", tags={ "developers", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "search results matching criteria category", response = PaginatedArticleModel.class, responseContainer = "Object"),
            @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = {"/article/category"},
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<PaginatedArticleModel> getArticlesByCateory(@ApiParam(value = "pass an optional search string for looking up article") @Valid @RequestParam(value = "category", required = false) String category
            ,@Min(0)@ApiParam(value = "number of records to skip for pagination", allowableValues = "") @Valid @RequestParam(value = "skip", required = false) Integer skip
            ,@Min(0) @Max(50) @ApiParam(value = "maximum number of records to return", allowableValues = "") @Valid @RequestParam(value = "limit", required = false) Integer limit
    );


    @ApiOperation(value = "update an article item", nickname = "updateArticle", notes = "Updates an article item to the system", tags={ "admins", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "item updated"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item doesn't exists") })
    @RequestMapping(value = "/article",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateArticle(@ApiParam(value = "article item updated"  )  @Valid @RequestBody Article body
);

}
